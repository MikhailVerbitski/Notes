
^                   Начало строки текста (line) или строки символов (string)
$                   Конец строки текста или строки символов
.                   Любой символ, кроме символа новой строки (если не установлен многострочный режим)
\w                  Символ-часть слова (цифра, буква или подчерк)
\W                  Символ, не являющийся частью слова
\s                  Пропуск (пробел, знак табуляции, символ новой строки и т.д.
\S                  Символ, не являющийся пропуском
\d                  Цифра (то же, что [0-9])
\D                  Не-цифра
\h                  Шестнадцатеричная цифра (то же, что [0-9a-f])
\Н                  Нешестнадцатеричная циdюа
\А                  Начало строки символов (striпg)
\Z                  Конец строки символов или позиция перед конечным символом новой 1 строки
\z                  Конец строки символов (string)
\Ь                  Граница слова (только вне [ ])
\В                  Не гранипа слова
\b                  Забой (только внутри [ ])
[]                  Произвольный набор символов (класс символов)
*                   О или более повторений предыдущего подвыражения
*?                  О или более повторе1шй предыдущего подвыражения (нежадный алгоритм)
+                   1 или более повторений предыдущего подвыражения
+?                  1 или более повторений предыдущеrо подвыражения (нежадный алгоритм)
(m, n)              От m до n вхождений предыдущего подвыражения
{m, n)?             От m до n вхождений предыдущего подвыражения (нежадный алгоритм)
?                   О или 1 повторений предыдущего подвыражения
|                   Альтернативы
()                  Группировка подвыражений
(?> )               Вложенное подвыражение
(?: )               Несохраняющая группировка подвыражений
(?imx-imx)          Включить/выключить режимы, начиная с этого места
(?imximx:expr)      Включить/выключить режимы для этого выражения
(?# )               Комментарий

(?i)                /аbс(?i)def/ Соответствует abcdef, abcDEF, abcDef, но не ABCdef
(?-i)               /ab(?i)cd(?-i)ef/ Соответствует abcdef, abCDef, abcDef, но не ABcdef или abcdEF
(?i:)               /ab(?i:cd)ef/ То же, что /ab(?i)cd(?-i)ef/ 

Символ каре ^ внутри класса символов( [] ) имеет специальный смысл. Если находится в начале, то он создает аналог логического исколючения:
[^aeiou] # Любой символ, Кроме ЕХСЕРТ а, е, i, о, u


Заглядывания дают возможность убедиться, находятся ли нужные посделовательности перед или после текущей позицией
----------------------------------------------------------------------------------------------------------------
(?= )               Позитивное заглядывание вперед (смотрит есть ли впереди указанная группа)
(?! )               Негативное заглядывание вперед (смотрит чтобы впереди не было указанной группы)
(?<= )              Позитивное заглядывание назад (смотрит чтобы сзади была указанная группа)
(?<! )              Негативное заглядывание назад (стотрит чтобы сзади не было указанной группы)
----------------------------------------------------------------------------------------------------------------


Именованные или нумерованные ссылки позваляют использовать результаты предыдущих групп для сравнения
----------------------------------------------------------------------------------------------------
\number         где number это порядковое положение захватываемой группы в регулярном выражении. Например, \4 соответствует содержимому четвертой захватываемой группы.
(?<anyword>)    создает захватываемою группу, где anyword заменяет number из нумерованной ссылки
\k              где name это имя захватываемой группы

!!!В одном и том же регулярном выражении нельзя одновременно использовать нучерованные и именованные обратные ссылки.

Пример: \s+(?<anyword>\w+)\s+\k<anyword>\s+ Ищет одинаковые слова

Еще одно применение именованных выражений -- повторное использование выражения. 
В таком случае имени должно предшествовать \g (а не \k).
Например, определим образец spaces, так чтобы его можно было использовать повторно. 
Предыдущее регулярное тогда принимает вид:
re = (?<spaces>\s+)(?<anyword>\w+)\g<spaces>\k<anyword>\g<spaces>
----------------------------------------------------------------------------------------------------


Внутри классов символов в квадратных скобках можно использовать оператор && для комбинирования классов:
reg1 = /[a-z&&[^aeiou]]/    // любая буква, кроме гласных а, е, i, о, u
reg2 = /[a-z&&[^m-p]]/      // весь алфавит, кроме букв от m до р 


/regex/x        x значит что регулярка может/будет в несколько строк
/regex/m        m значит что регулярка точка будет восприниматься как конец строки

захват содержимого xml подобной разметки:
(?:^|(?<=>))([^<]*)